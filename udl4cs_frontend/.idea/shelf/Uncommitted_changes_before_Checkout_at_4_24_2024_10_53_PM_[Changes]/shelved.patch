Index: frontend/components/Search.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useEffect, useRef, useState} from 'react'\r\nimport {Typeahead} from \"react-bootstrap-typeahead\";\r\nimport {Form} from \"react-bootstrap\";\r\n\r\n\r\nexport default function Search({ setResults, tag }) {\r\n    // input holds user search bar input (changes when user changes input field)\r\n    const [input, setInput] = useState(\"\");\r\n\r\n    // multiSelections holds all tag selections made by user in the tag input field\r\n    const [multiSelections, setMultiSelections] = useState([]);\r\n\r\n    // Tags API to retrieve all available tags to put on resources\r\n    const TAGS_API_BASE_URL = \"http://localhost:8080/tags\";\r\n\r\n    // Loading use state keeps track of the fetched data and if it has been loaded in yet\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // Tags use state keeps track of all the tags from the Tags API\r\n    const [tags, setTags] = useState(null);\r\n\r\n    // Fetch all tags from the Tags URL API\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const response = await fetch(TAGS_API_BASE_URL, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                });\r\n                const tags = await response.json();\r\n                setTags(tags);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n            setLoading(false);\r\n        };\r\n        fetchData();\r\n    }, [tag]);\r\n\r\n    // Fetch all resources that match up name-wise from the search input field and our database as well as match the selected tas from the inputs as our search results\r\n    const fetchData = (value) => {\r\n        fetch(\"http://localhost:8080/resources\")\r\n            .then((response)=>response.json())\r\n            .then((json) => {\r\n                const results = json.filter((resource) => {\r\n                    // Must return resources that match the search input and have selected tags\r\n                    return (\r\n                        value &&\r\n                        resource &&\r\n                        resource.resourceName &&\r\n                        resource.resourceName.toUpperCase().includes(value.toUpperCase()) &&\r\n                            tagsExist(resource)\r\n                    );\r\n                });\r\n                setResults(results);\r\n            });\r\n    }\r\n\r\n    // Check if the current resource being searched has the tags that user has selected as search filter\r\n    function tagsExist(resource) {\r\n        if (multiSelections.length == 0) {\r\n            return true;\r\n        }\r\n\r\n        var resourceTags = [];\r\n        for (var i = 0; i < resource.tags.length; i++) {\r\n            resourceTags.push(resource.tags[i].tag.tagName);\r\n        }\r\n\r\n        for (let i = 0 ; i < multiSelections.length; i++) {\r\n            if (resourceTags.indexOf(multiSelections[i]) == -1)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Handle change when user input field changes\r\n    const handleChange = (value) => {\r\n        setInput(value);\r\n        fetchData(value);\r\n    }\r\n\r\n    // When new filters are added, go through all resources in the Resource URL API and check if any of the resources have the input tags\r\n    const handleFilterChange = () => {\r\n        if (multiSelections.length != 0 && !input) {\r\n            fetch(\"http://localhost:8080/resources\")\r\n                .then((response) => response.json())\r\n                .then((json) => {\r\n                    const results = json.filter((resource) => {\r\n                        return (\r\n                            tagsExist(resource)\r\n                        );\r\n                    });\r\n                    setResults(results);\r\n                });\r\n        }\r\n        if (input) {\r\n            fetchData(input);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!loading &&(\r\n                <div className=\"row align-items-center justify-content-center\">\r\n                    <div className=\"col-md-4 col-sm-4\">\r\n                        <div className=\"input-group\" id=\"search-box\">\r\n                            <input className=\"form-control border-end-0 border\"\r\n                                   type=\"search\"\r\n                                   placeholder=\"Search resource\"\r\n                                   aria-label=\"Search resource\"\r\n                                   id=\"example-search-input\"\r\n                                   value={input}\r\n                                   onChange={(e) => handleChange(e.target.value)}\r\n                            />\r\n\r\n                            <button className=\"btn btn-outline-light border-spacing-0.5\" type=\"button\"\r\n                                    id=\"button-addon2\"><i className=\"bi bi-search\"></i></button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-2 col-sm-2\">\r\n                        <div>\r\n                            <Form.Group>\r\n                                <Typeahead\r\n                                    id=\"basic-typeahead-multiple\"\r\n                                    labelKey=\"name\"\r\n                                    multiple\r\n                                    onInput={handleFilterChange()}\r\n                                    onChange={setMultiSelections}\r\n                                    options={tags.map(el => el.tagName)}\r\n                                    placeholder=\"Filter with tags...\"\r\n                                    selected={multiSelections}\r\n                                    style={{border: '1px solid #0576B8', borderRadius: '7px'}}\r\n                                />\r\n                            </Form.Group>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/components/Search.js b/frontend/components/Search.js
--- a/frontend/components/Search.js	(revision 103ebd875eb1aa259c33dd6a4ddbd8beb4b4be12)
+++ b/frontend/components/Search.js	(date 1714004608567)
@@ -40,13 +40,15 @@
         fetchData();
     }, [tag]);
 
-    // Fetch all resources that match up name-wise from the search input field and our database as well as match the selected tas from the inputs as our search results
+    // Fetch all resources that match up name-wise from the search input field and our
+    // database as well as match the selected tags from the inputs as our search results
     const fetchData = (value) => {
         fetch("http://localhost:8080/resources")
             .then((response)=>response.json())
             .then((json) => {
                 const results = json.filter((resource) => {
-                    // Must return resources that match the search input and have selected tags
+                    // Must return resources that match the search input and
+                    // have selected tags
                     return (
                         value &&
                         resource &&
@@ -59,7 +61,8 @@
             });
     }
 
-    // Check if the current resource being searched has the tags that user has selected as search filter
+    // Check if the current resource being searched has the tags that user has selected
+    // as search filter
     function tagsExist(resource) {
         if (multiSelections.length == 0) {
             return true;
